// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// reference : https://authjs.dev/getting-started/adapters/prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  adSenseAccount AdsenseAccount[]
  adSensePayment AdsensePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NotificationCron NotificationCron[]

  NotificationReports NotificationReports[]
}

model AdsenseAccount {
  accountId String? 
  userId    String @id
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AdsensePayment {
  userId    String @id
  paid      String[]
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationCron {
  userId      String @id
  cronExpression String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationReports {
  reportId  Int @id() @default(autoincrement()) 
  userId    String 
  report    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime 

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


// npm exec prisma migrate dev 스키마 변경사항 때 마다 실행(스키마 적용)

// npx prisma generate 클라이언트 인스턴스로 추가 혹은 변경된 스키마 접근이 안 되는 경우 실행